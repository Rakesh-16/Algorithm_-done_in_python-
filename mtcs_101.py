# -*- coding: utf-8 -*-
"""MTCS-101.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eqP6MnUAhhi8bCfuLqL99d5TWa1N8bKS

right most occurance in Binary Search
"""

import numpy as np

random_array = np.random.randint(1,10,size=10)
sorted_array = sorted(random_array)
print("Sorted array:", sorted_array)
print("Random array:", random_array)

def BS(A, X):
    l = 0
    r = len(A) - 1

    while l < r:
        mid = (l + r) // 2

        if A[mid] < X:
            l = mid + 1
        elif A[mid] > X:
            r = mid - 1
        else:
                res = mid
                l = mid+1

    return res

A = [1, 3, 5, 7, 7, 11, 11, 13, 15]
X = 7
result = BS(A, X)

if result != -1:
    print(f"Element {X} found at index {result}")
else:
    print(f"Element {X} not found in the array")

"""Fibonacci number
----------
f(n+2) =  f(n+1) + f(n)


f0 = f1 = 0 } n >= 0

1  1  2  3  5  8  13  21
"""

# i = no. of fibonacci number printed till now
# i.e. f0 f1 f2 ........fi

# if n = 5  it should print 1 1 2 3
# if n = 6 it should print 1 1 2 3 5

n = input("Enter the number of fibonacci numbers to be printed: ")
n = int(n)

if n < 0:
    print("Incorrect input")
else:
    i = 0

    while(i != n):
        if i == 0 :
            print(1)
            n1 = 1
        elif i == 1 :
            print(1)
            n2 = 1
        else:
            n3 = n1 + n2
            print(n3)
            n1 = n2
            n2 = n3
        i += 1

# Given n > 0 ,print the largest fibonacci number less than n

n = input("Enter the number")
n = int(n)

if n < 2:
    print("incorrect input")
else:

    num = 0
    n1 = n2 = 1

    while(num != n):

        n3 = n1 + n2
        if n3 >= n:
            break
        num = n3
        n1 = n2
        n2 = n3
        i += 1
    print(num)

def fibonacci_recursive(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)


n = 6
result = fibonacci_recursive(n)
print(f"The {n}-th Fibonacci number is: {result}")

"""number of function call

"""

def fibonacci_recursive(n, count=0):

    count += 1

    if n <= 0:
        return 0, count
    elif n == 1:
        return 1, count
    else:

        fib_n_1, count = fibonacci_recursive(n-1, count)
        fib_n_2, count = fibonacci_recursive(n-2, count)
        return fib_n_1 + fib_n_2, count

# Example usage:
n = 5
result, calls = fibonacci_recursive(n)
print(f"The {n}-th Fibonacci number is: {result}")
print(f"Number of function calls made: {calls}")

"""#2 Zeckendorf representation

> Add blockquote


"""

def zeckendorf(n):
    while(n > 0):
        i = large_fib(n)
        n = n - i
        print(i)




def large_fib(n):
    fib1, fib2 = 1, 2

    if n <= 1:
       return None

    while fib2 <= n:
       fib1, fib2 = fib2, fib1 + fib2
    return fib1

n = input("Enter the number")
n = int(n)

result = zeckendorf(n)
print(result)

#9 yield
def fib_generator():
    fib1, fib2 = 1, 1
    while True:
        yield fib1
        fib1, fib2 = fib2, fib1 + fib2



gen = fib_generator()

while True:

  print(next(gen))
  print(" ")

#10 left most occurence

def BSL(A, X):
    l = 0
    r = len(A) - 1

    while l < r:
        mid = (l + r) // 2

        if A[mid] < X:
            l = mid + 1
        elif A[mid] > X:
            r = mid - 1
        else:
                res = mid
                r = mid-1


    return res

A = [1, 3, 5, 7, 7, 7, 7, 11, 11, 13, 15]
X = 11
result = BSL(A, X)

if result != -1:
    print(f"Element {X} found at index {result}")
else:
    print(f"Element {X} not found in the array")

#5(i) Representing given number in 1s n 2s recursive way
def represent(n):

  if n == 1 :
    #print("1")
    return '1'
  elif n == 2 :
    #print("2")
    return '2'
  elif n%2 == 0:
      return represent(n-2) + '2'
  else :
      return represent((n-1)) + '1'


n = input("Enter any number:")
n = int(n)

result = represent(n)
print(result)

#5(ii) Representing given number in 1s n 2s iterative way

def iter_represent(n):
  while(n > 0):
    if n%2 == 0:
      print("2")
      n = n-2

    else :
      print("1")
      n = n-1
n = input("Enter any number:")
n = int(n)

iter_represent(n)

#8 Interpolation search
def Interpolation(A,X):
  l = 0
  r = len(A)-1
  while(l <= r):
    mid = l + ((X-A[l])*(r-l)/(A[r]-A[l]))
    if A[mid] == X:
      return mid
    elif A[mid] < X:
      l = mid+1
    else:
      r = mid-1
  return -1

def fib(n):
  if n == 1:
    return [1]
  elif n == 2:
    return [1,1]
  else:
        fib_list = [1, 1]
        for i in range(2, n):
            fib_list.append(fib_list[-1] + fib_list[-2])
        return fib_list

n = input("Enter the number")
n = int(n)
A = fib(n)
print(A)

X = input("Enter the key")
X = int(X)
result = Interpolation(A,X)
if result != -1:
  print(f"Element {X} found at index {result}")
else:
  print(f"Element {X} not found in the array")

# insertion sort
def insertion(A):
  for i in range(1,len(A)):
    key = A[i]
    j = i-1
    while(j >= 0 and A[j] > key):
      A[j+1] = A[j]
      j = j-1
    A[j+1] = key
  return A

A = [12, 11, 13, 5, 6]
print(insertion(A))

# selection sort
def selection(A):
  for i in range(len(A)):
    min_idx = i
    for j in range(i+1, len(A)):
      if A[min_idx] > A[j]:
        min_idx = j
    A[i], A[min_idx] = A[min_idx], A[i]
  return A

A = [12, 11, 13, 5, 6]
print(selection(A))

#counting sort
def counting(A, k):
  count = [0] * (k+1)
  for i in range(len(A)):
    count[A[i]] += 1
  i = 0
  for j in range(len(count)):
    while(count[j] > 0):
      A[i] = j
      i += 1
      count[j] -= 1
      return A

A = [1, 4, 1, 2, 7, 5, 2]
k = max(A)
print(counting(A, k))

"""LATER"""

def BS(A, X):
    l = 0
    r = len(A) - 1

    while l < r:
        mid = (l + r) // 2

        if A[mid] < X:
            l = mid + 1
        elif A[mid] > X:
            r = mid - 1
        else:
                res = mid

    return res

##BS BASED

n = input("Enter the number of fibonacci numbers to be printed: ")
n = int(n)

fibo_list = []

if n < 0:
    print("Incorrect input")
else:
    i = 0

    while(i != n):
        if i == 0 :
            n1 = 1
            fibo_list.append(n1)

        elif i == 1 :

            print(1)
            n2 = 1
            fibo_list.append(n2)

        else:
            n3 = n1 + n2
            fibo_list.append(n3)
            n1 = n2
            n2 = n3
        i += 1
    fibo